// Code generated by protoc-gen-go. DO NOT EDIT.
// source: findmax/findmaxpb/findmax.proto

package findmaxpb

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindMaxRequest struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaxRequest) Reset()         { *m = FindMaxRequest{} }
func (m *FindMaxRequest) String() string { return proto.CompactTextString(m) }
func (*FindMaxRequest) ProtoMessage()    {}
func (*FindMaxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c971c64c44204b9, []int{0}
}

func (m *FindMaxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaxRequest.Unmarshal(m, b)
}
func (m *FindMaxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaxRequest.Marshal(b, m, deterministic)
}
func (m *FindMaxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaxRequest.Merge(m, src)
}
func (m *FindMaxRequest) XXX_Size() int {
	return xxx_messageInfo_FindMaxRequest.Size(m)
}
func (m *FindMaxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaxRequest proto.InternalMessageInfo

func (m *FindMaxRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type FindMaxResponse struct {
	Max                  int32    `protobuf:"varint,1,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaxResponse) Reset()         { *m = FindMaxResponse{} }
func (m *FindMaxResponse) String() string { return proto.CompactTextString(m) }
func (*FindMaxResponse) ProtoMessage()    {}
func (*FindMaxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c971c64c44204b9, []int{1}
}

func (m *FindMaxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaxResponse.Unmarshal(m, b)
}
func (m *FindMaxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaxResponse.Marshal(b, m, deterministic)
}
func (m *FindMaxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaxResponse.Merge(m, src)
}
func (m *FindMaxResponse) XXX_Size() int {
	return xxx_messageInfo_FindMaxResponse.Size(m)
}
func (m *FindMaxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaxResponse proto.InternalMessageInfo

func (m *FindMaxResponse) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func init() {
	proto.RegisterType((*FindMaxRequest)(nil), "findmax.FindMaxRequest")
	proto.RegisterType((*FindMaxResponse)(nil), "findmax.FindMaxResponse")
}

func init() { proto.RegisterFile("findmax/findmaxpb/findmax.proto", fileDescriptor_2c971c64c44204b9) }

var fileDescriptor_2c971c64c44204b9 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcb, 0xcc, 0x4b,
	0xc9, 0x4d, 0xac, 0xd0, 0x87, 0xd2, 0x05, 0x49, 0x30, 0x96, 0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe,
	0x10, 0x3b, 0x94, 0xab, 0xa4, 0xc4, 0xc5, 0xe7, 0x96, 0x99, 0x97, 0xe2, 0x9b, 0x58, 0x11, 0x94,
	0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc0, 0xc5, 0x9c, 0x57, 0x9a, 0x2b, 0xc1, 0xa8, 0xc0,
	0xa8, 0xc1, 0x1a, 0x04, 0x62, 0x2a, 0x29, 0x73, 0xf1, 0xc3, 0xd5, 0x14, 0x17, 0xe4, 0xe7, 0x15,
	0xa7, 0x82, 0x14, 0xe5, 0x26, 0x56, 0xc0, 0x14, 0xe5, 0x26, 0x56, 0x18, 0x05, 0xc1, 0x0d, 0x0a,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x72, 0xe0, 0x62, 0x87, 0x8a, 0x08, 0x89, 0xeb, 0xc1,
	0xac, 0x47, 0xb5, 0x4c, 0x4a, 0x02, 0x53, 0x02, 0x62, 0x83, 0x06, 0xa3, 0x01, 0xa3, 0x13, 0x77,
	0x14, 0x27, 0xdc, 0x03, 0x49, 0x6c, 0x60, 0x97, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcb,
	0x5c, 0x1e, 0x61, 0xdc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FindMaxServiceClient is the client API for FindMaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FindMaxServiceClient interface {
	FindMax(ctx context.Context, opts ...grpc.CallOption) (FindMaxService_FindMaxClient, error)
}

type findMaxServiceClient struct {
	cc *grpc.ClientConn
}

func NewFindMaxServiceClient(cc *grpc.ClientConn) FindMaxServiceClient {
	return &findMaxServiceClient{cc}
}

func (c *findMaxServiceClient) FindMax(ctx context.Context, opts ...grpc.CallOption) (FindMaxService_FindMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FindMaxService_serviceDesc.Streams[0], "/findmax.FindMaxService/FindMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &findMaxServiceFindMaxClient{stream}
	return x, nil
}

type FindMaxService_FindMaxClient interface {
	Send(*FindMaxRequest) error
	Recv() (*FindMaxResponse, error)
	grpc.ClientStream
}

type findMaxServiceFindMaxClient struct {
	grpc.ClientStream
}

func (x *findMaxServiceFindMaxClient) Send(m *FindMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *findMaxServiceFindMaxClient) Recv() (*FindMaxResponse, error) {
	m := new(FindMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FindMaxServiceServer is the server API for FindMaxService service.
type FindMaxServiceServer interface {
	FindMax(FindMaxService_FindMaxServer) error
}

func RegisterFindMaxServiceServer(s *grpc.Server, srv FindMaxServiceServer) {
	s.RegisterService(&_FindMaxService_serviceDesc, srv)
}

func _FindMaxService_FindMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FindMaxServiceServer).FindMax(&findMaxServiceFindMaxServer{stream})
}

type FindMaxService_FindMaxServer interface {
	Send(*FindMaxResponse) error
	Recv() (*FindMaxRequest, error)
	grpc.ServerStream
}

type findMaxServiceFindMaxServer struct {
	grpc.ServerStream
}

func (x *findMaxServiceFindMaxServer) Send(m *FindMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *findMaxServiceFindMaxServer) Recv() (*FindMaxRequest, error) {
	m := new(FindMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FindMaxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "findmax.FindMaxService",
	HandlerType: (*FindMaxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindMax",
			Handler:       _FindMaxService_FindMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "findmax/findmaxpb/findmax.proto",
}
